一、安装
  sudo apt-get install git
二、设置用户（首次提交时会提示）
  git config --global user.name "Your Name"
  git config --global user.email "email@example.com"
三、创建版本库
  （1）创建目录
    mkdir gitdir
    cd gitdir
  （2）初始化
    git init
四、添加文件
  git add readme.git
  git commit -m 'wrote a readme file'
五、查看
  git status
  git diff readme.txt
六、版本控制
  git log
  git log --pretty=oneline
  git reflog (查看git所有命令)
  git reset --hard HEAD^(回退到上次提交的位置)
  git reset --hard HEAD~100（回退到前100次提交的位置）
  git reset --hard 3628164(版本号)
七、工作区和暂存区
  工作区：电脑里能看到的目录
  版本库：.git
    stage（或者叫index）的暂存区
    自动创建的第一个分支master
    指向master的一个指针叫HEAD
  添加文件时：
  第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
  第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
八、管理修改
  为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。
  git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
九、撤销修改
  git checkout -- readme.txt
  git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
  git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。
十、删除文件
  git rm test.txt
  工作区删除后，使用该命令删除暂存区的文件


    

  
  
  
  
  
  
  
  
  
  
  
初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit，完成。

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
